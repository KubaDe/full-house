// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id           String         @id @default(cuid())
  clerkId      String         @unique
  createdAt    DateTime       @default(now()) @map(name: "created_at")
  profile      Profile?       @relation(fields: [profileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  profileId    String?        @unique
  UsersOnRooms UsersOnRooms[]

  @@map(name: "users")
}

model Avatar {
  id         String   @id @default(cuid())
  body       String
  face       String
  hair       String
  facialHair String
  accessory  String
  profile    Profile?

  @@map(name: "avatar")
}

model Profile {
  id   String @id @default(cuid())
  name String
  user User?

  avatar   Avatar @relation(fields: [avatarId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  avatarId String @unique

  @@map(name: "profile")
}

model Room {
  id    String         @id @default(cuid())
  name  String
  users UsersOnRooms[]

  @@map(name: "room")
}

model UsersOnRooms {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  room       Room     @relation(fields: [roomId], references: [id])
  roomId     String
  assignedAt DateTime @default(now())
  isOwner    Boolean  @default(false)
  alias      String?

  @@id([userId, roomId])
  @@map(name: "users_on_rooms")
}

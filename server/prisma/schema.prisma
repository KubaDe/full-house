// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String?  @unique
  createdAt DateTime @default(now()) @map(name: "created_at")

  profile   Profile? @relation(fields: [profileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  profileId String?  @unique

  usersOnRooms       UsersOnRooms[]
  sentInvitations    Invitation[]   @relation(name: "sender")
  recivedInvitations Invitation[]   @relation(name: "receiver")

  @@map(name: "users")
}

model Avatar {
  id         String   @id @default(cuid())
  body       String
  face       String
  hair       String
  facialHair String
  accessory  String
  profile    Profile?

  @@map(name: "avatar")
}

model Profile {
  id   String @id @default(cuid())
  name String
  user User?

  avatar   Avatar @relation(fields: [avatarId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  avatarId String @unique

  @@map(name: "profile")
}

model Room {
  id   String @id @default(cuid())
  name String

  users       UsersOnRooms[]
  invitations Invitation[]

  @@map(name: "room")
}

model UsersOnRooms {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  room   Room   @relation(fields: [roomId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roomId String

  assignedAt DateTime @default(now())
  isOwner    Boolean  @default(false)
  alias      String?

  @@id([userId, roomId])
  @@map(name: "users_on_rooms")
}

model Invitation {
  id     String  @id @default(cuid())
  email  String?
  token  String
  isOpen Boolean @default(false)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  receiver   User?   @relation(fields: [receiverId], references: [id], name: "receiver")
  receiverId String?

  sender   User?   @relation(fields: [senderId], references: [id], name: "sender")
  senderId String?

  room   Room   @relation(fields: [roomId], references: [id])
  roomId String

  @@map(name: "invitation")
}
